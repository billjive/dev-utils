//// Licensed under the MIT license: http://opensource.org/licenses/MIT//// Bill Lynch, 1/2015////// Export layers from Illustrator CC 2014 and write them as PNGs. Inspired and based on Johan Otterud's original// script here: https://github.com/nexios/nexios/blob/master/design/export-custom.jsx//// This script works differently from the original in that I export all layers *not* prefixed with "_". His// script only exported layers beginning with specific characters. (Layers must be non-locked and visible)//// Further, I export each layer as a PNG in various sizes (see "SIZES" array below) and different resolutions// (1x, 2x, 3x). This is geared towards iOS usage.. nothing for other platforms yet.//// Caveats:// - This has only been tested on OSX 10.10 using Illy CC 2014.// - Square layers are assumed. The export sizes assume the same width and height.// - Output will be overriden if already exists - no prompting or checking for this.// - Only non-locked and visible layers are candidates for export. Only layers prefixed with "_" are skipped.// - Doesn't test for the existence of the output directory. I'm using Illy's file picker so I think//   I can assume a valid path// - Always clips to the artboard//// Ask the user for the export directoryvar outputDir = Folder.selectDialog("Choose the output folder for all PNGs", "~")//// Configuration//// Sizes of images we want in pixels. Note, this assumes square output (W=H). These// sizes are added to the name of the file (file-SIZE.png for example)var SIZES = [32, 48, 64]// Output in multiple resolutions? If true, then 1x, 2x, and 3x are produced. Else, just 1x.var MULTIPLE_RESOLUTIONS = true// File suffixes for different resolutions.var RESOLUTION_1x_SUFFIX = ""var RESOLUTION_2x_SUFFIX = "@2x"var RESOLUTION_3x_SUFFIX = "@3x"// Scale factors for the different resolutionsvar RESOLUTION_1x_SCALE = 1var RESOLUTION_2x_SCALE = 2var RESOLUTION_3x_SCALE = 3//// End configuration//// Get the active document and create a collection for layer datavar doc = app.activeDocumentvar layerData = new Array()// Find all layers that should be saved and save them to the export layers array. Also gathers// info about each layer to hidden/visible info can be restored after the PNGs are created.collectLayerData(doc, null)// Maintain a count of actual exported layersvar layersToExportCount = 0// For all layers to export...for (var i = 0; i < layerData.length; i++) {    if (layerData[i].tag == "include") {        // Hide all layers first        hideAllLayers()        // Now show all layers needed to actually display the current layer on screen        layerData[i].showIncludingParentAndChildLayers()        // Now export the layer as one or multiple PNG files        for (var s=0; s<SIZES.length; s++) {            var size = SIZES[s]            var outputFile = outputDir + "/" + layerData[i].layer.name + "-" + size            // 100%            savePNG((outputFile + RESOLUTION_1x_SUFFIX + ".png"), size, RESOLUTION_1x_SCALE)            if (MULTIPLE_RESOLUTIONS) {                // 200%                savePNG((outputFile + RESOLUTION_2x_SUFFIX + ".png"), size, RESOLUTION_2x_SCALE)                // 300%                savePNG((outputFile + RESOLUTION_3x_SUFFIX + ".png"), size, RESOLUTION_3x_SCALE)            }        }        layersToExportCount++    }}// Restore everything like it was before!restoreAllLayers()// Was there anything exported? If not make a warning!if (layersToExportCount == 0) {    alert("No layers to export.\n\nOnly non-locked and visible layers will be exported unless you add a '_' to the beginning of the layer name.")} else {    // Show a completed message    alert(layersToExportCount + " layer(s) was successfully exported to:\n" + outputDir)}function hideAllLayers() {    for (var i=0; i<layerData.length; i++) {        layerData[i].hide()    }}function restoreAllLayers() {    for (var i=0; i<layerData.length; i++) {        layerData[i].restoreVisibility()    }}// Collects information about the various layers, saves as tags in a struct function collectLayerData(rootLayer, extendedRootLayer) {    for (var i=0; i<rootLayer.layers.length; i++) {        // Skip locked layers and non visible ones        if (!rootLayer.layers[i].locked && rootLayer.layers[i].visible) {            var extendedLayer = new ExtendedLayer(rootLayer.layers[i])            // Set up parent            extendedLayer.parentLayer = extendedRootLayer            // Also add this layer to the parents child collection            if (extendedRootLayer != null) {                extendedRootLayer.childLayers.push(extendedLayer)            }            layerData.push(extendedLayer)            // Tag these layers so that we later can find out if we should export these layers or not            if (rootLayer.layers[i].name.substring(0,1) == "_") {                extendedLayer.tag = "skip"            }            else {                extendedLayer.tag = "include"            }            // We should not export this layer but we continue looking for sub layers that might need to be exported            collectLayerData(rootLayer.layers[i], extendedLayer)        }    }}// Holds info and additional methods for layersfunction ExtendedLayer(layer) {    this.originalVisibility = layer.visible    this.layer = layer    this.tag = ""    this.hide = hide    this.show = show    this.showIncludingParentAndChildLayers = showIncludingParentAndChildLayers    this.restoreVisibility = restoreVisibility    this.restoreVisibilityIncludingChildLayers = restoreVisibilityIncludingChildLayers    this.layerName = layer.name    // Set after creating    this.childLayers = new Array()    this.parentLayer = null    function hide() {        layer.visible = false    }    function show() {        layer.visible = true    }    // Shows this layer including it's parent layers (up to the root) and it's child layers    function showIncludingParentAndChildLayers() {        var parentlayerName = ""        if (this.parentLayer != null) {            parentlayerName = this.parentLayer.layerName        }        // Show all parents first        var aParentLayer = this.parentLayer        while (aParentLayer != null) {            aParentLayer.restoreVisibility()            // Keep looking            aParentLayer = aParentLayer.parentLayer        }        // Show our own layer finally        this.restoreVisibilityIncludingChildLayers()    }    function restoreVisibility() {        layer.visible = this.originalVisibility    }    function restoreVisibilityIncludingChildLayers() {        this.restoreVisibility()        // Call recursively for each child layer        for (var i = 0; i < this.childLayers.length; i++) {            this.childLayers[i].restoreVisibilityIncludingChildLayers()        }    }}// Save PNG filefunction savePNG(file, size, scale, artBoardClipping) {    var docscaler = doc.width / 100.0 // scaler to convert art board sizes to desired pixels    var finalSize = (size/docscaler) * scale    var exp = new ExportOptionsPNG24()    exp.transparency = true    exp.horizontalScale = finalSize    exp.verticalScale = finalSize    exp.artBoardClipping = true    doc.exportFile(new File(file), ExportType.PNG24, exp)}